import { Telegraf, Context } from 'telegraf'
import dotenv from 'dotenv'
import type { Chat } from '@telegraf/types'
import 'reflect-metadata'
import type { BotData } from './types'
import { AppDataSource } from './data-source'
import { User } from './entity/User'

dotenv.config()

const token = process.env.TELEGRAM_TOKEN
if (!token) {
  process.exit(1)
}
const bot = new Telegraf(token)
const imageUrl = 'https://i.ibb.co/gLWbCjXY/photo-2025-04-03-07-03-17.jpg'

const readData = async (): Promise<BotData> => {
  return { userId: null }
}

const saveData = async (): Promise<void> => {
  console.error('Error saving data:')
}

const sendFirstMessage = async (ctx: Context): Promise<void> => {
  await ctx.replyWithPhoto(imageUrl, {
    caption: `üïµÔ∏è‚Äç‚ôÇÔ∏è –ù–∞—à –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤ –≤ –ø–µ—Ä–µ–ø–∏—Å–∫–µ.\n\n<blockquote>–ï—Å–ª–∏ –≤–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∏–∑–º–µ–Ω–∏—Ç –∏–ª–∏ —É–¥–∞–ª–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –≤—ã –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –æ–± —ç—Ç–æ–º —É–∑–Ω–∞–µ—Ç–µ üì±\n\n–¢–∞–∫–∂–µ –±–æ—Ç —É–º–µ–µ—Ç —Å–∫–∞—á–∏–≤–∞—Ç—å –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ (–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å —Ç–∞–π–º–µ—Ä–æ–º) —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –≥–æ–ª–æ—Å–æ–≤—ã–µ –∏ –∫—Ä—É–∂–∫–∏ ‚åõÔ∏è</blockquote>\n\n‚ùì –ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ ‚Äî —Å–º–æ—Ç—Ä–∏ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ üëÜ\n\n–ò–º—è –±–æ—Ç–∞: <code>@${ctx.botInfo?.username}</code> (—Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è)\n\n–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞:`,
    parse_mode: 'HTML',
    reply_markup: {
      inline_keyboard: [
        [{ text: '–ü–æ–¥–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞', callback_data: 'connect_bot' }],
        [{ text: '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', callback_data: 'instruction' }],
      ],
    },
  })
}

bot.command('start', async (ctx: Context): Promise<void> => {
  await sendFirstMessage(ctx)

  const data = await readData()
  if (ctx.chat) {
    data.userId = ctx.chat.id
    await saveData()
  }

  await ctx.reply(
    '<b>‚úÖ –ó–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ 7 –¥–Ω–µ–π</b>\n\n–°–∫–æ—Ä–µ–µ –ø–æ–¥–∫–ª—é—á–∞–π—Ç–µ –±–æ—Ç–∞ –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å–µ –µ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!',
    { parse_mode: 'HTML' }
  )

  const userRepository = AppDataSource.getRepository(User)

  console.log('ctx', ctx)

  const user = new User()
  user.firstName = 'Timber'
  user.lastName = 'Saw'
  user.telegramId = '1234567890'
  user.registrationDate = new Date()
  user.trialPeriodEnd = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000)

  await userRepository.save(user)

  const allUsers = await userRepository.find()

  console.log('allUsers', allUsers)

  // if (timber) {
  //   await userRepository.remove(timber)
  // }
})

bot.on('message', async (ctx) => {
  await sendFirstMessage(ctx)
})

bot.on('business_message', async (): Promise<void> => {
  // db sender
})

bot.on('edited_business_message', async (ctx) => {
  const message = ctx.update.edited_business_message

  const data = await readData()
  if (data.userId && message.from.id !== ctx.botInfo.id) {
    await ctx.telegram.sendMessage(
      data.userId,
      `üìù –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ:\n` +
        `–û—Ç: ${message.from.first_name} ${message.from.last_name || ''} (@${message.from.username || '–Ω–µ—Ç username'})`,
      { parse_mode: 'HTML' }
    )
  }
})

bot.on('deleted_business_messages', async (ctx) => {
  const deleted = ctx.update.deleted_business_messages.chat as Chat.PrivateChat

  const data = await readData()

  if (data.userId && deleted.id !== ctx.botInfo.id) {
    await ctx.telegram.sendMessage(
      data.userId,
      `üìù –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ:\n` +
        `–û—Ç: ${deleted.first_name} ${deleted.last_name || ''} (@${deleted.username || '–Ω–µ—Ç username'})`,
      { parse_mode: 'HTML' }
    )
  }
})

bot.action('connect_bot', async (ctx: Context): Promise<void> => {
  await ctx.reply('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞...')
  await ctx.answerCbQuery()
})

bot.action('instruction', async (ctx: Context): Promise<void> => {
  await ctx.reply('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è...')
  await ctx.answerCbQuery()
})

bot.catch((err: Error): void => {
  console.error('Bot error:', err)
})
;(async (): Promise<void> => {
  try {
    await AppDataSource.initialize()
    console.log('Data Source has been initialized!')
    await bot.launch()
  } catch (error) {
    console.error('Error during initialization:', error)
    process.exit(1)
  }
})()

process.once('SIGINT', () => bot.stop('SIGINT'))
process.once('SIGTERM', () => bot.stop('SIGTERM'))
