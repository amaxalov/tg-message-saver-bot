import { Telegraf, Context } from 'telegraf'
import dotenv from 'dotenv'
import type { Update } from '@telegraf/types'
import 'reflect-metadata'
import { In } from 'typeorm'
import { AppDataSource } from './data-source'
import { userLoginHandler } from './handlers/user-login-handler'
import { Sender } from './entity/Sender'
import { Message } from './entity/Message'
import { User } from './entity/User'

dotenv.config()

const token = process.env.TELEGRAM_TOKEN

if (!token) {
  process.exit(1)
}

const bot = new Telegraf<Context>(token)
const imageUrl = 'https://i.ibb.co/gLWbCjXY/photo-2025-04-03-07-03-17.jpg'

const sendFirstMessage = async (ctx: Context<any>): Promise<void> => {
  await ctx.replyWithPhoto(imageUrl, {
    caption: `üïµÔ∏è‚Äç‚ôÇÔ∏è –ù–∞—à –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤ –≤ –ø–µ—Ä–µ–ø–∏—Å–∫–µ.\n\n<blockquote>–ï—Å–ª–∏ –≤–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∏–∑–º–µ–Ω–∏—Ç –∏–ª–∏ —É–¥–∞–ª–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –≤—ã –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –æ–± —ç—Ç–æ–º —É–∑–Ω–∞–µ—Ç–µ üì±\n\n–¢–∞–∫–∂–µ –±–æ—Ç —É–º–µ–µ—Ç —Å–∫–∞—á–∏–≤–∞—Ç—å –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ (–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å —Ç–∞–π–º–µ—Ä–æ–º) —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –≥–æ–ª–æ—Å–æ–≤—ã–µ –∏ –∫—Ä—É–∂–∫–∏ ‚åõÔ∏è</blockquote>\n\n‚ùì –ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ ‚Äî —Å–º–æ—Ç—Ä–∏ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ üëÜ\n\n–ò–º—è –±–æ—Ç–∞: <code>@${ctx.botInfo?.username}</code> (—Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è)\n\n–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞:`,
    parse_mode: 'HTML',
    reply_markup: {
      inline_keyboard: [
        [{ text: '–ü–æ–¥–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞', callback_data: 'connect_bot' }],
        [{ text: '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', callback_data: 'instruction' }],
      ],
    },
  })
}

bot.command('start', async (ctx: Context<Update.MessageUpdate>): Promise<void> => {
  await sendFirstMessage(ctx)

  await ctx.reply(
    '<b>‚úÖ –ó–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ 7 –¥–Ω–µ–π</b>\n\n–°–∫–æ—Ä–µ–µ –ø–æ–¥–∫–ª—é—á–∞–π—Ç–µ –±–æ—Ç–∞ –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å–µ –µ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!',
    { parse_mode: 'HTML' }
  )

  await userLoginHandler(ctx.update.message.from)
})

bot.on('message', async (ctx: Context<Update.MessageUpdate>) => {
  await sendFirstMessage(ctx)
})

bot.on('business_message', async (ctx: Context<Update.BusinessMessageUpdate>): Promise<void> => {
  const message = ctx.update.business_message
  const currentUser = ctx.update.business_message.from.id
  const userRepository = AppDataSource.getRepository(User)
  const userEntity = await userRepository.findOne({
    where: {
      telegramId: String(currentUser),
    },
  })

  if (!userEntity) {
    const ownerEntity = await userRepository.findOne({
      where: {
        business_connection_ids: In([String(message.business_connection_id)]),
      },
    })

    if (!ownerEntity) {
      console.log('ownerEntity not found')
      return
    }

    const text = (message as typeof ctx.update.business_message & { text: string }).text
    const sender = message.from
    const senderRepository = AppDataSource.getRepository(Sender)
    const senderEntity = await senderRepository.findOne({
      where: {
        telegramId: String(sender.id),
      },
    })

    const newMessage = new Message()
    newMessage.messageId = String(message.message_id)
    newMessage.text = text
    newMessage.createdAt = new Date()
    newMessage.user = ownerEntity

    if (!senderEntity) {
      const newSender = new Sender()
      newSender.telegramId = String(sender.id)
      newSender.first_name = sender.first_name
      newSender.last_name = sender.last_name || ''
      newSender.username = sender.username || ''
      newSender.user = ownerEntity

      newMessage.sender = newSender
      newSender.messages = [newMessage]

      await senderRepository.save(newSender)
    } else {
      newMessage.sender = senderEntity
      await senderRepository.manager.save(newMessage)
    }
  } else {
    if (!userEntity.business_connection_ids.includes(message.business_connection_id)) {
      userEntity.business_connection_ids = [...userEntity.business_connection_ids, message.business_connection_id]
      await userRepository.save(userEntity)
    }
  }
})

bot.on('edited_business_message', async (ctx: Context<Update.EditedBusinessMessageUpdate>): Promise<void> => {
  const message = ctx.update.edited_business_message
  const text = (message as typeof ctx.update.edited_business_message & { text: string }).text
  const messageRepository = AppDataSource.getRepository(Message)

  const editedMessage = await messageRepository.findOne({
    where: {
      messageId: String(message.message_id),
    },
    relations: ['sender'],
  })

  if (!editedMessage) {
    return
  }

  await ctx.telegram.sendMessage(
    editedMessage.sender.user.telegramId,
    `üìù –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ:\n` +
      `–û—Ç: ${editedMessage.sender.first_name} ${editedMessage.sender.last_name || ''} 
      (@${editedMessage.sender.username || ''})\n
      –ü—Ä–µ–∂–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${editedMessage.text}\n
      –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${text}`,
    { parse_mode: 'HTML' }
  )

  editedMessage.text = text

  await messageRepository.save(editedMessage)
})

bot.on('deleted_business_messages', async (ctx: Context<Update.DeletedBusinessMessagesUpdate>): Promise<void> => {
  const message = ctx.update.deleted_business_messages
  const messageIds = message.message_ids
  const messageRepository = AppDataSource.getRepository(Message)

  const editedMessages = await messageRepository.find({
    where: {
      messageId: In(messageIds.map(String)),
    },
  })

  console.log('Found messages:', editedMessages)

  if (!editedMessages.length) {
    return
  }

  // –ó–∞—Ç–µ–º —è–≤–Ω–æ –∑–∞–≥—Ä—É–∑–∏–º –æ—Ç–Ω–æ—à–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  const firstMessage = await messageRepository
    .createQueryBuilder('message')
    .leftJoinAndSelect('message.sender', 'sender')
    .leftJoinAndSelect('sender.user', 'user')
    .where('message.id = :id', { id: editedMessages[0].id })
    .getOne()

  if (!firstMessage || !firstMessage.sender || !firstMessage.sender.user) {
    console.error('Failed to load message with relations')
    return
  }

  await ctx.telegram.sendMessage(
    firstMessage.sender.user.telegramId,
    `üìù –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ:\n` +
      `–û—Ç: ${firstMessage.sender.first_name} ${firstMessage.sender.last_name || ''} 
      (@${firstMessage.sender.username || ''})
      ${editedMessages.map((message) => `\n${message.text}`).join('')}`,
    { parse_mode: 'HTML' }
  )
})

bot.action('connect_bot', async (ctx: Context): Promise<void> => {
  await ctx.reply('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞...')
  await ctx.answerCbQuery()
})

bot.action('instruction', async (ctx: Context): Promise<void> => {
  await ctx.reply('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è...')
  await ctx.answerCbQuery()
})

bot.on('business_connection', async (ctx) => {
  console.log('new_chat_members', ctx)
})

bot.catch((err: Error): void => {
  console.error('Bot error:', err)
})
;(async (): Promise<void> => {
  try {
    await AppDataSource.initialize()
    console.log('Data Source has been initialized!')
    await bot.launch()
  } catch (error) {
    console.error('Error during initialization:', error)
    process.exit(1)
  }
})()

process.once('SIGINT', () => bot.stop('SIGINT'))
process.once('SIGTERM', () => bot.stop('SIGTERM'))
